// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	ccx "github.com/severalnines/terraform-provider-ccx/internal/ccx"

	mock "github.com/stretchr/testify/mock"
)

// MockVPCService is an autogenerated mock type for the VPCService type
type MockVPCService struct {
	mock.Mock
}

type MockVPCService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVPCService) EXPECT() *MockVPCService_Expecter {
	return &MockVPCService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, vpc
func (_m *MockVPCService) Create(ctx context.Context, vpc ccx.VPC) (*ccx.VPC, error) {
	ret := _m.Called(ctx, vpc)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ccx.VPC
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccx.VPC) (*ccx.VPC, error)); ok {
		return rf(ctx, vpc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccx.VPC) *ccx.VPC); ok {
		r0 = rf(ctx, vpc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ccx.VPC)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccx.VPC) error); ok {
		r1 = rf(ctx, vpc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVPCService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockVPCService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - vpc ccx.VPC
func (_e *MockVPCService_Expecter) Create(ctx interface{}, vpc interface{}) *MockVPCService_Create_Call {
	return &MockVPCService_Create_Call{Call: _e.mock.On("Create", ctx, vpc)}
}

func (_c *MockVPCService_Create_Call) Run(run func(ctx context.Context, vpc ccx.VPC)) *MockVPCService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccx.VPC))
	})
	return _c
}

func (_c *MockVPCService_Create_Call) Return(_a0 *ccx.VPC, _a1 error) *MockVPCService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVPCService_Create_Call) RunAndReturn(run func(context.Context, ccx.VPC) (*ccx.VPC, error)) *MockVPCService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockVPCService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVPCService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockVPCService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockVPCService_Expecter) Delete(ctx interface{}, id interface{}) *MockVPCService_Delete_Call {
	return &MockVPCService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockVPCService_Delete_Call) Run(run func(ctx context.Context, id string)) *MockVPCService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVPCService_Delete_Call) Return(_a0 error) *MockVPCService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVPCService_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockVPCService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, id
func (_m *MockVPCService) Read(ctx context.Context, id string) (*ccx.VPC, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *ccx.VPC
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ccx.VPC, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ccx.VPC); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ccx.VPC)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVPCService_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockVPCService_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockVPCService_Expecter) Read(ctx interface{}, id interface{}) *MockVPCService_Read_Call {
	return &MockVPCService_Read_Call{Call: _e.mock.On("Read", ctx, id)}
}

func (_c *MockVPCService_Read_Call) Run(run func(ctx context.Context, id string)) *MockVPCService_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVPCService_Read_Call) Return(_a0 *ccx.VPC, _a1 error) *MockVPCService_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVPCService_Read_Call) RunAndReturn(run func(context.Context, string) (*ccx.VPC, error)) *MockVPCService_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, vpc
func (_m *MockVPCService) Update(ctx context.Context, vpc ccx.VPC) (*ccx.VPC, error) {
	ret := _m.Called(ctx, vpc)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *ccx.VPC
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccx.VPC) (*ccx.VPC, error)); ok {
		return rf(ctx, vpc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccx.VPC) *ccx.VPC); ok {
		r0 = rf(ctx, vpc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ccx.VPC)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccx.VPC) error); ok {
		r1 = rf(ctx, vpc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVPCService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockVPCService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - vpc ccx.VPC
func (_e *MockVPCService_Expecter) Update(ctx interface{}, vpc interface{}) *MockVPCService_Update_Call {
	return &MockVPCService_Update_Call{Call: _e.mock.On("Update", ctx, vpc)}
}

func (_c *MockVPCService_Update_Call) Run(run func(ctx context.Context, vpc ccx.VPC)) *MockVPCService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccx.VPC))
	})
	return _c
}

func (_c *MockVPCService_Update_Call) Return(_a0 *ccx.VPC, _a1 error) *MockVPCService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVPCService_Update_Call) RunAndReturn(run func(context.Context, ccx.VPC) (*ccx.VPC, error)) *MockVPCService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVPCService creates a new instance of MockVPCService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVPCService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVPCService {
	mock := &MockVPCService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
