// Code generated by mockery v2.43.2. DO NOT EDIT.

package api

import (
	context "context"

	ccx "github.com/severalnines/terraform-provider-ccx/internal/ccx"

	mock "github.com/stretchr/testify/mock"
)

// mockDatastoreService is an autogenerated mock type for the DatastoreService type
type mockDatastoreService struct {
	mock.Mock
}

type mockDatastoreService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDatastoreService) EXPECT() *mockDatastoreService_Expecter {
	return &mockDatastoreService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, c
func (_m *mockDatastoreService) Create(ctx context.Context, c ccx.Datastore) (*ccx.Datastore, error) {
	ret := _m.Called(ctx, c)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ccx.Datastore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccx.Datastore) (*ccx.Datastore, error)); ok {
		return rf(ctx, c)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccx.Datastore) *ccx.Datastore); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ccx.Datastore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccx.Datastore) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDatastoreService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockDatastoreService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - c ccx.Datastore
func (_e *mockDatastoreService_Expecter) Create(ctx interface{}, c interface{}) *mockDatastoreService_Create_Call {
	return &mockDatastoreService_Create_Call{Call: _e.mock.On("Create", ctx, c)}
}

func (_c *mockDatastoreService_Create_Call) Run(run func(ctx context.Context, c ccx.Datastore)) *mockDatastoreService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccx.Datastore))
	})
	return _c
}

func (_c *mockDatastoreService_Create_Call) Return(_a0 *ccx.Datastore, _a1 error) *mockDatastoreService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDatastoreService_Create_Call) RunAndReturn(run func(context.Context, ccx.Datastore) (*ccx.Datastore, error)) *mockDatastoreService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *mockDatastoreService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDatastoreService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockDatastoreService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *mockDatastoreService_Expecter) Delete(ctx interface{}, id interface{}) *mockDatastoreService_Delete_Call {
	return &mockDatastoreService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *mockDatastoreService_Delete_Call) Run(run func(ctx context.Context, id string)) *mockDatastoreService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockDatastoreService_Delete_Call) Return(_a0 error) *mockDatastoreService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDatastoreService_Delete_Call) RunAndReturn(run func(context.Context, string) error) *mockDatastoreService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, id
func (_m *mockDatastoreService) Read(ctx context.Context, id string) (*ccx.Datastore, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *ccx.Datastore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ccx.Datastore, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ccx.Datastore); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ccx.Datastore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDatastoreService_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type mockDatastoreService_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *mockDatastoreService_Expecter) Read(ctx interface{}, id interface{}) *mockDatastoreService_Read_Call {
	return &mockDatastoreService_Read_Call{Call: _e.mock.On("Read", ctx, id)}
}

func (_c *mockDatastoreService_Read_Call) Run(run func(ctx context.Context, id string)) *mockDatastoreService_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockDatastoreService_Read_Call) Return(_a0 *ccx.Datastore, _a1 error) *mockDatastoreService_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDatastoreService_Read_Call) RunAndReturn(run func(context.Context, string) (*ccx.Datastore, error)) *mockDatastoreService_Read_Call {
	_c.Call.Return(run)
	return _c
}

// SetFirewallRules provides a mock function with given fields: ctx, storeID, firewalls
func (_m *mockDatastoreService) SetFirewallRules(ctx context.Context, storeID string, firewalls []ccx.FirewallRule) error {
	ret := _m.Called(ctx, storeID, firewalls)

	if len(ret) == 0 {
		panic("no return value specified for SetFirewallRules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []ccx.FirewallRule) error); ok {
		r0 = rf(ctx, storeID, firewalls)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDatastoreService_SetFirewallRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFirewallRules'
type mockDatastoreService_SetFirewallRules_Call struct {
	*mock.Call
}

// SetFirewallRules is a helper method to define mock.On call
//   - ctx context.Context
//   - storeID string
//   - firewalls []ccx.FirewallRule
func (_e *mockDatastoreService_Expecter) SetFirewallRules(ctx interface{}, storeID interface{}, firewalls interface{}) *mockDatastoreService_SetFirewallRules_Call {
	return &mockDatastoreService_SetFirewallRules_Call{Call: _e.mock.On("SetFirewallRules", ctx, storeID, firewalls)}
}

func (_c *mockDatastoreService_SetFirewallRules_Call) Run(run func(ctx context.Context, storeID string, firewalls []ccx.FirewallRule)) *mockDatastoreService_SetFirewallRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]ccx.FirewallRule))
	})
	return _c
}

func (_c *mockDatastoreService_SetFirewallRules_Call) Return(_a0 error) *mockDatastoreService_SetFirewallRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDatastoreService_SetFirewallRules_Call) RunAndReturn(run func(context.Context, string, []ccx.FirewallRule) error) *mockDatastoreService_SetFirewallRules_Call {
	_c.Call.Return(run)
	return _c
}

// SetParameters provides a mock function with given fields: ctx, storeID, parameters
func (_m *mockDatastoreService) SetParameters(ctx context.Context, storeID string, parameters map[string]string) error {
	ret := _m.Called(ctx, storeID, parameters)

	if len(ret) == 0 {
		panic("no return value specified for SetParameters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) error); ok {
		r0 = rf(ctx, storeID, parameters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDatastoreService_SetParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParameters'
type mockDatastoreService_SetParameters_Call struct {
	*mock.Call
}

// SetParameters is a helper method to define mock.On call
//   - ctx context.Context
//   - storeID string
//   - parameters map[string]string
func (_e *mockDatastoreService_Expecter) SetParameters(ctx interface{}, storeID interface{}, parameters interface{}) *mockDatastoreService_SetParameters_Call {
	return &mockDatastoreService_SetParameters_Call{Call: _e.mock.On("SetParameters", ctx, storeID, parameters)}
}

func (_c *mockDatastoreService_SetParameters_Call) Run(run func(ctx context.Context, storeID string, parameters map[string]string)) *mockDatastoreService_SetParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *mockDatastoreService_SetParameters_Call) Return(_a0 error) *mockDatastoreService_SetParameters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDatastoreService_SetParameters_Call) RunAndReturn(run func(context.Context, string, map[string]string) error) *mockDatastoreService_SetParameters_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, old, next
func (_m *mockDatastoreService) Update(ctx context.Context, old ccx.Datastore, next ccx.Datastore) (*ccx.Datastore, error) {
	ret := _m.Called(ctx, old, next)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *ccx.Datastore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ccx.Datastore, ccx.Datastore) (*ccx.Datastore, error)); ok {
		return rf(ctx, old, next)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ccx.Datastore, ccx.Datastore) *ccx.Datastore); ok {
		r0 = rf(ctx, old, next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ccx.Datastore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ccx.Datastore, ccx.Datastore) error); ok {
		r1 = rf(ctx, old, next)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDatastoreService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockDatastoreService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - old ccx.Datastore
//   - next ccx.Datastore
func (_e *mockDatastoreService_Expecter) Update(ctx interface{}, old interface{}, next interface{}) *mockDatastoreService_Update_Call {
	return &mockDatastoreService_Update_Call{Call: _e.mock.On("Update", ctx, old, next)}
}

func (_c *mockDatastoreService_Update_Call) Run(run func(ctx context.Context, old ccx.Datastore, next ccx.Datastore)) *mockDatastoreService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ccx.Datastore), args[2].(ccx.Datastore))
	})
	return _c
}

func (_c *mockDatastoreService_Update_Call) Return(_a0 *ccx.Datastore, _a1 error) *mockDatastoreService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDatastoreService_Update_Call) RunAndReturn(run func(context.Context, ccx.Datastore, ccx.Datastore) (*ccx.Datastore, error)) *mockDatastoreService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDatastoreService creates a new instance of mockDatastoreService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDatastoreService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDatastoreService {
	mock := &mockDatastoreService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
