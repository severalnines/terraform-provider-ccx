// Code generated by mockery v2.43.2. DO NOT EDIT.

package api

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockjobService is an autogenerated mock type for the jobService type
type mockjobService struct {
	mock.Mock
}

type mockjobService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockjobService) EXPECT() *mockjobService_Expecter {
	return &mockjobService_Expecter{mock: &_m.Mock}
}

// Await provides a mock function with given fields: ctx, storeID, job
func (_m *mockjobService) Await(ctx context.Context, storeID string, job jobType) (jobStatus, error) {
	ret := _m.Called(ctx, storeID, job)

	if len(ret) == 0 {
		panic("no return value specified for Await")
	}

	var r0 jobStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, jobType) (jobStatus, error)); ok {
		return rf(ctx, storeID, job)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, jobType) jobStatus); ok {
		r0 = rf(ctx, storeID, job)
	} else {
		r0 = ret.Get(0).(jobStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, jobType) error); ok {
		r1 = rf(ctx, storeID, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockjobService_Await_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Await'
type mockjobService_Await_Call struct {
	*mock.Call
}

// Await is a helper method to define mock.On call
//   - ctx context.Context
//   - storeID string
//   - job jobType
func (_e *mockjobService_Expecter) Await(ctx interface{}, storeID interface{}, job interface{}) *mockjobService_Await_Call {
	return &mockjobService_Await_Call{Call: _e.mock.On("Await", ctx, storeID, job)}
}

func (_c *mockjobService_Await_Call) Run(run func(ctx context.Context, storeID string, job jobType)) *mockjobService_Await_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(jobType))
	})
	return _c
}

func (_c *mockjobService_Await_Call) Return(_a0 jobStatus, _a1 error) *mockjobService_Await_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockjobService_Await_Call) RunAndReturn(run func(context.Context, string, jobType) (jobStatus, error)) *mockjobService_Await_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields: _a0, storeID, job
func (_m *mockjobService) GetStatus(_a0 context.Context, storeID string, job jobType) (jobStatus, error) {
	ret := _m.Called(_a0, storeID, job)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 jobStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, jobType) (jobStatus, error)); ok {
		return rf(_a0, storeID, job)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, jobType) jobStatus); ok {
		r0 = rf(_a0, storeID, job)
	} else {
		r0 = ret.Get(0).(jobStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, jobType) error); ok {
		r1 = rf(_a0, storeID, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockjobService_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type mockjobService_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - storeID string
//   - job jobType
func (_e *mockjobService_Expecter) GetStatus(_a0 interface{}, storeID interface{}, job interface{}) *mockjobService_GetStatus_Call {
	return &mockjobService_GetStatus_Call{Call: _e.mock.On("GetStatus", _a0, storeID, job)}
}

func (_c *mockjobService_GetStatus_Call) Run(run func(_a0 context.Context, storeID string, job jobType)) *mockjobService_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(jobType))
	})
	return _c
}

func (_c *mockjobService_GetStatus_Call) Return(_a0 jobStatus, _a1 error) *mockjobService_GetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockjobService_GetStatus_Call) RunAndReturn(run func(context.Context, string, jobType) (jobStatus, error)) *mockjobService_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// newMockjobService creates a new instance of mockjobService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockjobService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockjobService {
	mock := &mockjobService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
